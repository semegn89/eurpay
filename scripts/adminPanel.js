

/* adminPanel.js */
import { showToast, readFileAndStore } from './utils.js';
import { getItem, setItem } from './dbStorage.js';
import { renderAdminStats } from './statsadmin.js';

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–æ–≤ (–æ–±—â–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —é–∑–µ—Ä–∞)
function renderMessages(arr, container, currentUserRole = 'admin') {
  container.innerHTML = '';
  arr.forEach(msg => {
    const who = msg.from === 'user' ? 'user' : 'admin';
    const name = who === 'user'
      ? (msg.userEmail || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
      : "–ú–µ–Ω–µ–¥–∂–µ—Ä";
    const text = msg.fileName
      ? `<a href="${msg.fileData}" class="file-link" download="${msg.fileName}">${msg.fileName}</a>`
      : msg.text;
    const div = document.createElement('div');
    div.className = `chat-bubble ${who}`;
    div.innerHTML = `
      <div class="text">${text}</div>
      <div class="meta">
        <span class="author">${name}</span> ${msg.date || ''}
      </div>
    `;
    container.appendChild(div);
  });
  container.scrollTop = container.scrollHeight;
}
// –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: –ß–∞—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä)
export async function renderAdminChats() {
  const chatsData = await getItem('adminChats');
  let allChats = chatsData ? JSON.parse(chatsData) : {};
  let userEmails = Object.keys(allChats);

  const details = document.querySelector('.details');
  details.innerHTML = `
    <h1>–ß–∞—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h1>
    <div style="margin-bottom:10px;">
      <input type="text" id="chatSearchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ email..." style="padding:5px;">
      <button id="chatSearchBtn" class="button button-sm" style="margin-left:5px;">–ü–æ–∏—Å–∫</button>
    </div>
    <div id="chatCardsContainer" style="display:flex; flex-wrap:wrap; gap:20px;"></div>
    <div id="adminChatDialog" style="display:none; margin-top:20px;">
      <button id="backToList" class="button button-outline" style="margin-bottom:12px;">–ù–∞–∑–∞–¥</button>
      <h3 id="chatWithUser"></h3>
      <div id="adminChatHistory" style="height:280px;overflow-y:auto;background:#f6faff;border-radius:10px;padding:8px 6px 4px 6px;margin-bottom:14px;border:1px solid #ccc;"></div>
      <div style="display:flex; gap:5px;">
        <input type="file" id="adminChatFile" style="width:160px; display:none;" />
        <button id="adminAttachFileBtn" class="button button-sm">üìé</button>
        <input type="text" id="adminMsgInput" placeholder="–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..." style="flex:1;">
        <button id="adminSendBtn" class="button button-sm">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>
    </div>
  `;
  const chatSearchInput    = details.querySelector('#chatSearchInput');
  const chatSearchBtn      = details.querySelector('#chatSearchBtn');
  const chatCardsContainer = details.querySelector('#chatCardsContainer');
  const adminChatDialog    = details.querySelector('#adminChatDialog');
  const backBtn            = details.querySelector('#backToList');
  const adminChatHistory   = details.querySelector('#adminChatHistory');
  const adminMsgInput      = details.querySelector('#adminMsgInput');
  const adminChatFile      = details.querySelector('#adminChatFile');
  const adminAttachFileBtn = details.querySelector('#adminAttachFileBtn');
  const adminSendBtn       = details.querySelector('#adminSendBtn');
  let selectedUserEmail = null;

  chatSearchBtn.addEventListener('click', () => {
    const term = chatSearchInput.value.trim().toLowerCase();
    renderChatCards(term);
  });

  function renderChatCards(searchTerm='') {
    chatCardsContainer.innerHTML = '';
    let filtered = userEmails;
    if (searchTerm) {
      filtered = userEmails.filter(em => em.toLowerCase().includes(searchTerm));
    }
    if (!filtered.length) {
      chatCardsContainer.innerHTML = '<p>–ù–µ—Ç —á–∞—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.</p>';
      return;
    }

    filtered.forEach(email => {
      const chatArr = allChats[email] || [];
      const hasUnread = chatArr.some(m => m.from === 'user' && !m.readByAdmin);
      // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let lastMsg = chatArr.length ? chatArr[chatArr.length-1] : null;
      let lastMsgText = '';
      if (lastMsg) {
        if (lastMsg.fileName) {
          lastMsgText = `<span class="chat-card-lastmsg"><span style="color:#666;">üìé</span> ${lastMsg.fileName}</span>`;
        } else {
          lastMsgText = `<span class="chat-card-lastmsg">${lastMsg.text ? lastMsg.text.substring(0, 80) : ''}</span>`;
        }
      }
      // –ê–≤–∞—Ç–∞—Ä–∫–∞ (–∏–Ω–∏—Ü–∏–∞–ª)
      const avatarInitial = email[0] ? email[0].toUpperCase() : '?';
      const card = document.createElement('div');
      card.className = 'admin-chat-card';
      card.innerHTML = `
        <div style="display: flex; align-items: center; gap: 12px;">
          <div style="background: #c6dafc; color: #1762aa; font-weight:600; width:38px; height:38px; border-radius:50%; display:flex; align-items:center; justify-content:center; font-size:1.3em;">
            ${avatarInitial}
          </div>
          <div>
            <div class="chat-card-title">${email}</div>
            ${lastMsgText}
          </div>
        </div>
        <div style="display: flex; align-items: center; justify-content: space-between; margin-top: 8px;">
          <span style="font-size:0.98em; color:${hasUnread ? '#d32f2f' : '#388e3c'};">
            ${hasUnread ? '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ'}
          </span>
          <button class="openChatBtn button button-sm" style="margin-left:10px;">–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</button>
        </div>
      `;
      card.querySelector('.openChatBtn').addEventListener('click', () => {
        selectedUserEmail = email;
        showAdminChatDetail(email);
      });
      chatCardsContainer.appendChild(card);
    });

    adminChatDialog.style.display = 'none';
    chatCardsContainer.style.display = '';
  }

  renderChatCards();

  backBtn.addEventListener('click', () => {
    adminChatDialog.style.display = 'none';
    chatCardsContainer.style.display = '';
  });

  async function showAdminChatDetail(userEmail) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥, –ø—Ä—è—á–µ–º —Å–ø–∏—Å–æ–∫
    adminChatDialog.style.display = '';
    chatCardsContainer.style.display = 'none';
    details.querySelector('#chatWithUser').textContent = `–î–∏–∞–ª–æ–≥ —Å ${userEmail}`;
    // –ì—Ä—É–∑–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
    let allChats = JSON.parse(await getItem('adminChats') || '{}');
    let userChat = allChats[userEmail] || [];
    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    userChat.forEach(msg => { if (msg.from === 'user') msg.readByAdmin = true; });
    allChats[userEmail] = userChat;
    await setItem('adminChats', JSON.stringify(allChats));

    // –ï–¥–∏–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ renderMessages
    renderMessages(userChat, adminChatHistory, 'admin');

    adminAttachFileBtn.onclick = () => adminChatFile.click();
    adminSendBtn.onclick = sendAdminMsg;
    adminMsgInput.onkeypress = (e) => { if (e.key === 'Enter') sendAdminMsg(); };

    function sendAdminMsg() {
      const txt = adminMsgInput.value.trim();
      const file = adminChatFile.files[0];
      if (!txt && !file) {
        showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'error');
        return;
      }
      let msgObj = {
        userEmail,
        from: 'admin',
        text: '',
        fileName: '',
        fileData: '',
        date: new Date().toLocaleString()
      };
      if (file) {
        const reader = new FileReader();
        reader.onload = async (ev) => {
          msgObj.fileName = file.name;
          msgObj.fileData = ev.target.result;
          userChat.push(msgObj);
          allChats[userEmail] = userChat;
          await setItem('adminChats', JSON.stringify(allChats));
          adminChatFile.value = '';
          adminMsgInput.value = '';
          renderMessages(userChat, adminChatHistory, 'admin');
        };
        reader.readAsDataURL(file);
      } else {
        msgObj.text = txt;
        userChat.push(msgObj);
        allChats[userEmail] = userChat;
        setItem('adminChats', JSON.stringify(allChats));
        adminMsgInput.value = '';
        renderMessages(userChat, adminChatHistory, 'admin');
      }
    }
  }
}

/**
 * –†–µ–Ω–¥–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å role==='admin'.
 */
export async function renderAdminPanel() {
  console.log('üìç adminPanel ‚Üí renderAdminPanel() –≤—ã–∑–≤–∞–Ω–∞');
  console.log('üß™ TEST MARKER: adminPanel.js –∂–∏–≤–æ–π, –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  const currentUserRaw = localStorage.getItem('currentUser');
  console.log('üìç currentUserRaw =', currentUserRaw);
  const currentUser = currentUserRaw ? JSON.parse(currentUserRaw) : {};
  const details = document.querySelector('.details');
  if (!currentUser || currentUser.role !== 'admin') {
    console.log('‚ùå –ù–ï –∞–¥–º–∏–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ renderAdminPanel()');
    details.innerHTML = '<h1>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω.</h1>';
    return;
  }
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–Ω–¥–µ—Ä');

  details.innerHTML = `
    <h1>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
    <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–ª–∞—Ç–µ–∂–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —à–∞–±–ª–æ–Ω–∞–º–∏.</p>
    <div style="margin-top:20px;" id="adminActions"></div>
  `;

  const adminActions = details.querySelector('#adminActions');
  adminActions.innerHTML = `
  <button id="manageUsersBtn" class="button">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
  <button id="manageRatesBtn" class="button" style="margin-left:10px;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã</button>
  <button id="manageStatsBtn" class="button" style="margin-left:10px;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–∞—Ä–∂–∞)</button>
  <button id="manageRequestsBtn" class="button" style="margin-left:10px;">–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞</button>
  <div id="adminContent" style="margin-top:30px;"></div>
`;

  const manageUsersBtn = adminActions.querySelector('#manageUsersBtn');
  const manageRatesBtn = adminActions.querySelector('#manageRatesBtn');
  const manageStatsBtn = adminActions.querySelector('#manageStatsBtn');
  const adminContent   = adminActions.querySelector('#adminContent');

  manageUsersBtn.addEventListener('click', renderAdminUsers);
  manageRatesBtn.addEventListener('click', renderAdminRates);
  manageStatsBtn.addEventListener('click', renderAdminStats);
  const manageRequestsBtn = adminActions.querySelector('#manageRequestsBtn');
  manageRequestsBtn.addEventListener('click', renderAdminRequestsPanel);

  /* ---------------------------------------------
     2) –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  --------------------------------------------- */
  async function renderAdminUsers() {
    const usersData = await getItem('users');
    const users = usersData ? JSON.parse(usersData) : [];
    const filtered = users.filter(u => u.role !== 'admin');

    adminContent.innerHTML = `
      <h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
      <div style="margin-bottom:10px;">
        <input type="text" id="userSearchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ email –∏–ª–∏ –ò–ù–ù..." style="padding:5px;">
        <button id="userSearchBtn" class="button button-sm" style="margin-left:5px;">–ò—Å–∫–∞—Ç—å</button>
      </div>
      <div id="usersCardsContainer" style="display:flex; flex-wrap:wrap; gap:20px;"></div>
    `;

    const userSearchInput = adminContent.querySelector('#userSearchInput');
    const userSearchBtn   = adminContent.querySelector('#userSearchBtn');
    const usersCardsContainer = adminContent.querySelector('#usersCardsContainer');

    userSearchBtn.addEventListener('click', () => {
      const val = userSearchInput.value.trim().toLowerCase();
      renderUsersCards(val);
    });

    function renderUsersCards(searchTerm='') {
      usersCardsContainer.innerHTML = '';

      let data = filtered;
      if (searchTerm) {
        data = data.filter(u =>
          (u.email.toLowerCase().includes(searchTerm)) ||
          ((u.inn||'').toLowerCase().includes(searchTerm))
        );
      }
      if (!data.length) {
        usersCardsContainer.innerHTML = '<p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.</p>';
        return;
      }

      data.forEach(u => {
        const card = document.createElement('div');
        card.style.width = '7cm';
        card.style.height= '7cm';
        card.style.border= '1px solid #ccc';
        card.style.borderRadius= '8px';
        card.style.padding= '10px';
        card.style.display= 'flex';
        card.style.flexDirection= 'column';
        card.style.justifyContent= 'space-between';

        card.innerHTML = `
          <div style="margin-bottom:5px;">
            <h4 style="margin:0;">${u.email}</h4>
            <p style="font-size:14px;">–ò–ù–ù: ${u.inn || '‚Äî'}</p>
            <p style="font-size:14px;">–°—Ç–∞–≤–∫–∞ –≤ %: ${u.feePercent}%</p>
          </div>
          <button class="editUserBtn button button-sm">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        `;

        card.querySelector('.editUserBtn').addEventListener('click', ()=>{
          showEditUserForm(u.email);
        });
        usersCardsContainer.appendChild(card);
      });
    }

    renderUsersCards();
  }

  async function renderAdminRequestsPanel() {
    adminContent.innerHTML = `
      <h2 style="margin-bottom: 16px;">–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞</h2>
      <div id="adminRequestsList"></div>
    `;
    loadAdminRequests();
  }

async function showEditUserForm(userEmail) {
  const usersData = await getItem('users');
  let users = usersData ? JSON.parse(usersData) : [];
  let userObj = users.find(u => u.email === userEmail);
  if (!userObj) {
    showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
    return;
  }
  const adminContent = document.getElementById('adminContent');
  adminContent.innerHTML = `
    <h4>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userObj.email}</h4>
    <form id="adminEditUserForm">
      <div class="form-row">
        <label>–ö–æ–º–ø–∞–Ω–∏—è:</label>
        <input type="text" name="companyName" value="${userObj.companyName || ''}">
      </div>
      <div class="form-row">
        <label>–ò–ù–ù:</label>
        <input type="text" name="inn" value="${userObj.inn || ''}">
      </div>
      <div class="form-row">
        <label>–ê–¥—Ä–µ—Å:</label>
        <input type="text" name="address" value="${userObj.address || ''}">
      </div>
      <div class="form-row">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</label>
        <input type="text" name="bankName" value="${userObj.bankName || ''}">
      </div>
      <div class="form-row">
        <label>–ë–ò–ö:</label>
        <input type="text" name="bik" value="${userObj.bik || ''}">
      </div>
      <div class="form-row">
        <label>–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞:</label>
        <input type="text" name="accountNumber" value="${userObj.accountNumber || ''}">
      </div>
      <div class="form-row">
        <label>–°—Ç–∞–≤–∫–∞ –≤ %:</label>
        <input type="number" step="0.01" name="feePercent" value="${userObj.feePercent || 0}">
      </div>
      <div class="form-row">
        <label>–ë–∞–ª–∞–Ω—Å (—Ä—É–±):</label>
        <input type="number" step="0.01" name="currentBalance" value="${userObj.currentBalance || 0}">
      </div>
      <div class="form-row">
        <label>–î–æ–≥–æ–≤–æ—Ä ‚Ññ:</label>
        <input type="text" name="agreementNo" value="${userObj.agreementNo || ''}">
      </div>
      <div class="form-row">
        <label>–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞:</label>
        <input type="text" name="agreementDate" value="${userObj.agreementDate || ''}">
      </div>
      <div class="form-row">
        <label>–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä:</label>
        <input type="text" name="directorName" value="${userObj.directorName || ''}">
      </div>
      <button type="submit" class="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </form>
    <hr>
    <h4>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</h4>
    <input type="text" id="adminNotifyText" style="width:80%;" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...">
    <button id="adminNotifyBtn" class="button button-sm">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</button>
  `;

  const adminEditUserForm = document.getElementById('adminEditUserForm');
  const adminNotifyText   = document.getElementById('adminNotifyText');
  const adminNotifyBtn    = document.getElementById('adminNotifyBtn');

  adminEditUserForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const fd = new FormData(adminEditUserForm);
    const newData = {
      companyName: fd.get('companyName') || '',
      inn: fd.get('inn') || '',
      address: fd.get('address') || '',
      bankName: fd.get('bankName') || '',
      bik: fd.get('bik') || '',
      accountNumber: fd.get('accountNumber') || '',
      feePercent: parseFloat(fd.get('feePercent')) || 0,
      currentBalance: parseFloat(fd.get('currentBalance')) || 0,
      agreementNo: fd.get('agreementNo') || '',
      agreementDate: fd.get('agreementDate') || '',
      directorName: fd.get('directorName') || ''
    };

    let idx = users.findIndex(x => x.email === userEmail);
    if (idx !== -1) {
      users[idx] = { ...users[idx], ...newData };
      await setItem('users', JSON.stringify(users));
      showToast('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!', 'success');
    }
  });

  adminNotifyBtn.addEventListener('click', async () => {
    const txt = adminNotifyText.value.trim();
    if (!txt) {
      showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
      return;
    }
    let idx = users.findIndex(x => x.email === userEmail);
    if (idx === -1) return;
    if (!users[idx].notifications) {
      users[idx].notifications = [];
    }
    users[idx].notifications.push({
      date: new Date().toLocaleString(),
      text: txt
    });
    await setItem('users', JSON.stringify(users));
    showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', 'success');
    adminNotifyText.value = '';
  });
}

  /* ---------------------------------------------
     3) –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–£–†–°–û–í –í–ê–õ–Æ–¢
  --------------------------------------------- */
  const flagsMap = {
    RUB: './images/flags/ru.png',
    USD: './images/flags/us.png',
    EUR: './images/flags/eu.png',
    AED: './images/flags/ae.png',
    CNY: './images/flags/cn.png',
    GBP: './images/flags/gb.png'
  };

  async function renderAdminRates() {
    // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let defRates = { RUB: 1, AED: 22, USD: 88, EUR: 94, CNY: 14, GBP: 122 };

    // –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
    const ratesData = await getItem('adminRates');
    let rates = ratesData ? JSON.parse(ratesData) : defRates;

    // –ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–æ–≤
    const ratesHistoryData = await getItem('adminRatesHistory');
    let ratesHistory = ratesHistoryData ? JSON.parse(ratesHistoryData) : [];
    if (!ratesHistory.length) {
      ratesHistory.push({
        date: new Date().toLocaleString(),
        rates: { ...rates }
      });
    }
    // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
    const ratesHistoryList = document.getElementById('ratesHistoryList');
    ratesHistoryList.innerHTML = '';
    ratesHistory.forEach(item => {
      const listItem = document.createElement('li');
      listItem.textContent = `${item.date}: ${JSON.stringify(item.rates)}`;
      ratesHistoryList.appendChild(listItem);
    }
    );
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–ª–∞–≥–∏ –≤–∞–ª—é—Ç
    const details = document.querySelector('.details');
    details.style.background = 'rgba(255,255,255,1)';
    const adminContent = document.getElementById('adminContent');
    adminContent.innerHTML = `
      <h1>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç</h1>
      <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</p>
    `;
    const ratesTable = document.createElement('table');
    ratesTable.className = 'rates-table';
    ratesTable.innerHTML = `
      <thead>
        <tr>
          <th>–í–∞–ª—é—Ç–∞</th>
          <th style="padding: 0 30px;">–ö—É—Ä—Å –¶–ë</th>
          <th style="padding: 0 30px;">–ö—É—Ä—Å –ê–≥–µ–Ω—Ç–∞</th>
        </tr>
      </thead>
      <tbody>
    `;
    for (let cur in rates) {
      const cbRate = rates[cur].cb;
      const agentRate = rates[cur].agent;
      const flagSrc = flagsMap[cur] || 'src/images/flags/default.png';
      ratesTable.innerHTML += `
        <tr>
          <td>
            <img src="${flagSrc}" alt="${cur}" class="flag-icon">
            <span>${cur}</span>
          </td>
          <td style="text-align:right;">${cbRate.toFixed(2)}</td>
          <td style="text-align:right;">${agentRate.toFixed(2)}</td>
        </tr>
      `;
    }
    ratesTable.innerHTML += `
      </tbody>
    </table>
    `;
    adminContent.appendChild(ratesTable);
    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const isAdmin = (currentUser.role === 'admin');
    if (isAdmin) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
      const editBtn = document.createElement('button');
      editBtn.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã';
      editBtn.className = 'button';
      editBtn.style.marginTop = '20px';
      adminContent.appendChild(editBtn);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      editBtn.addEventListener('click', () => {
        renderEditRatesForm(rates, ratesHistory);
      });
    }
  }
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
  function renderEditRatesForm(rates, ratesHistory) {
    const adminContent = document.getElementById('adminContent');
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    adminContent.innerHTML = '';

    adminContent.innerHTML = `
      <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã (1 –í–∞–ª—é—Ç–∞ = X RUB)</h3>
      <form id="ratesForm">
        <table class="rates-edit-table" style="width:100%; border-collapse: collapse;">
          <thead>
            <tr>
              <th style="border:1px solid #ccc; padding:5px;">–í–∞–ª—é—Ç–∞</th>
              <th style="border:1px solid #ccc; padding:5px;">–ö—É—Ä—Å –¶–ë</th>
              <th style="border:1px solid #ccc; padding:5px;">–ö—É—Ä—Å –ê–≥–µ–Ω—Ç–∞</th>
            </tr>
          </thead>
          <tbody>
            ${Object.keys(rates).map(cur => {
              if (typeof rates[cur] === 'number') {
                rates[cur] = { cb: rates[cur], agent: rates[cur] };
              }
              const flagSrc = flagsMap[cur] || 'src/images/flags/default.png';
              return `
                <tr>
                  <td style="border:1px solid #ccc; padding:5px;">
                    <img src="${flagSrc}" alt="${cur}" class="flag-icon" style="width:24px; vertical-align:middle; margin-right:5px;">
                    <span>${cur}</span>
                  </td>
                  <td style="border:1px solid #ccc; padding:5px; text-align:right;">
                    <input type="number" step="0.01" name="cb_${cur}" value="${rates[cur].cb}" style="width:80px;">
                  </td>
                  <td style="border:1px solid #ccc; padding:5px; text-align:right;">
                    <input type="number" step="0.01" name="agent_${cur}" value="${rates[cur].agent}" style="width:80px;">
                  </td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
        <button type="submit" class="button" style="margin-top:10px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </form>

      <h3>–ê—Ä—Ö–∏–≤ –∫—É—Ä—Å–æ–≤</h3>
      <div id="ratesHistoryList"></div>
      <button id="downloadArchiveBtn" class="button" style="margin-top:10px;">–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤</button>
    `;

    const ratesForm        = document.getElementById('ratesForm');
    const ratesHistoryList = document.getElementById('ratesHistoryList');

    // –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    ratesForm.addEventListener('submit', async (e)=>{
      e.preventDefault();
      const fd = new FormData(ratesForm);

      Object.keys(rates).forEach(cur => {
        const cbVal    = parseFloat(fd.get(`cb_${cur}`)) || 1;
        const agentVal = parseFloat(fd.get(`agent_${cur}`)) || cbVal;
        rates[cur].cb    = cbVal;
        rates[cur].agent = agentVal;
      });

      // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
      ratesHistory.push({
        date: new Date().toLocaleString(),
        rates: { ...rates } // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      });

      await setItem('adminRatesHistory', JSON.stringify(ratesHistory));
      await setItem('adminRates', JSON.stringify(rates));
      showToast('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
      renderAdminRates();
    });

    // –ü–æ–∫–∞–∑ –∞—Ä—Ö–∏–≤–∞
    function renderRatesHistory() {
      if (!ratesHistory.length) {
        ratesHistoryList.innerHTML = '<p>–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.</p>';
        return;
      }
      let html = '<ul>';
      ratesHistory.forEach(item => {
        html += `<li style="margin-bottom:5px;"><strong>${item.date}</strong>: `;
        for (let c in item.rates) {
          html += `${c} => –¶–ë=${item.rates[c].cb}, –ê–≥–µ–Ω—Ç–∞=${item.rates[c].agent}; `;
        }
        html += `</li>`;
      });
      html += '</ul>';
      ratesHistoryList.innerHTML = html;
    }
    renderRatesHistory();

    const downloadBtn = document.getElementById('downloadArchiveBtn');
    downloadBtn.addEventListener('click', ()=>{
      const archiveStr = JSON.stringify(ratesHistory, null, 2);
      const blob       = new Blob([archiveStr], { type:'application/json' });
      const url        = URL.createObjectURL(blob);
      const a          = document.createElement('a');
      a.href           = url;
      a.download       = 'rates_archive.json';
      a.click();
      URL.revokeObjectURL(url);
    });
  }
}