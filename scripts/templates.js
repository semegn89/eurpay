// templates.js
import { showToast, showPreview } from './utils.js';

export async function renderTemplatesPage(){
    const details=document.querySelector('.details');
    const currentUser=JSON.parse(localStorage.getItem('currentUser'))||{};
    const isAdmin=(currentUser.role==='admin');

    details.innerHTML=`
      <h1>–®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h1>

      <p>–ù–∏–∂–µ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π (–∫–∞—Ä—Ç–æ—á–∫–∏). –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—Å–∫–∞—á–∞—Ç—å –∏—Ö —à–∞–±–ª–æ–Ω—ã.</p>
      ${
        isAdmin ? `<button id="addCompanyBtn" class="button" style="margin-bottom:10px;">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é ¬´–∫–∞—Ä—Ç–æ—á–∫—É¬ª</button>` : ``
      }
      <div id="companiesContainer"></div>
    `;
    const addCompanyBtn=details.querySelector('#addCompanyBtn');
    const companiesContainer=details.querySelector('#companiesContainer');

    // –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (–∫–∞—Ä—Ç–æ—á–µ–∫) –±–µ–∑ ID 
    let companies=JSON.parse(localStorage.getItem('templatesCompanies'))||[
      {id:'romashka', name:'–û–û–û –†–æ–º–∞—à–∫–∞'},
      {id:'vasilek', name:'–û–û–û –í–∞—Å–∏–ª—ë–∫'}
    ];

    if(isAdmin && addCompanyBtn){
      addCompanyBtn.addEventListener('click',()=>{
      const name=prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∫–∞—Ä—Ç–æ—á–∫–∏), –Ω–∞–ø—Ä. –û–û–û –õ–Æ–¢–ò–ö');
      if(!name)return;
      const cid = 'comp-'+Date.now();
      companies.push({id:cid, name});
      localStorage.setItem('templatesCompanies', JSON.stringify(companies));
      showToast(`–ö–æ–º–ø–∞–Ω–∏—è ¬´${name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!`,'success');
      renderCompanyCards();
      });
    }
    // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–ª–æ–Ω–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–ø–∞–Ω–∏–π –≤ —à–∞–±–ª–æ–Ω–∞—Ö –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    function showAdminChatDetail(email){
      details.innerHTML=`
        <h1>–ß–∞—Ç —Å ${email}</h1>
        <div id="chatCardsContainer" style="margin-top:20px; display: flex; flex-wrap: wrap; gap: 20px;"></div>
        <button id="backToChatsBtn" class="button button-outline" style="margin-top:10px;">–ù–∞–∑–∞–¥ –∫ —á–∞—Ç–∞–º</button>
        <button id="addChatBtn" class="button" style="margin-top:10px;">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç</button>
        <div id="chatForm" style="display:none; margin-top:20px;">
          <form id="newChatForm">
            <div class="form-row">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:</label>
              <input type="text" name="name" required>
            </div>
            <div class="form-row">
              <label>–§–∞–π–ª —á–∞—Ç–∞:</label>
              <input type="file" name="file" required>
            </div>
            <button type="submit" class="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button type="button" id="cancelChat" class="button button-outline" style="margin-left:10px;">–û—Ç–º–µ–Ω–∞</button>
          </form>
        </div>
        <div id="chatList" style="margin-top:20px; display: flex; flex-wrap: wrap; gap: 20px;"></div>
      `;
      const chatCardsContainer=details.querySelector('#chatCardsContainer');
      const backToChatsBtn=details.querySelector('#backToChatsBtn');
      const addChatBtn=details.querySelector('#addChatBtn');
      const chatForm=details.querySelector('#chatForm');
      const newChatForm=details.querySelector('#newChatForm');
      const cancelChat=details.querySelector('#cancelChat');
      const chatList=details.querySelector('#chatList');
      const allChats=JSON.parse(localStorage.getItem('allChats'))||{};
      const userEmails=Object.keys(allChats);
      if(!userEmails.length){
        chatCardsContainer.innerHTML='<p>–ù–µ—Ç —á–∞—Ç–æ–≤ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</p>';
        return;
      }
    }  

    function renderChatCards(searchTerm = '') {
      chatCardsContainer.innerHTML = '';
      let filtered = userEmails;
      if (searchTerm) {
        filtered = userEmails.filter(em => em.toLowerCase().includes(searchTerm));
      }
      if (!filtered.length) {
        chatCardsContainer.innerHTML = '<p>–ù–µ—Ç —á–∞—Ç–æ–≤ —Å —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.</p>';
        return;
      }
    
      filtered.forEach(email => {
        const chatArr = allChats[email] || [];
        const hasUnread = chatArr.some(m => m.from === 'user' && !m.readByAdmin);
    
        const card = document.createElement('div');
        card.style.width = '100%'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫–∏
        card.style.border = '1px solid #ccc';
        card.style.borderRadius = '8px';
        card.style.padding = '10px';
        card.style.display = 'flex';
        card.style.flexDirection = 'column'; // –î–µ–ª–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π
        card.style.justifyContent = 'space-between';
        card.style.marginBottom = '20px'; // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    
        card.innerHTML = `
          <div>
            <h4 style="margin-bottom:5px;">${email}</h4>
            ${
              hasUnread
                ? `<p style="color:red;">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</p>`
                : `<p style="color:green;">–í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ</p>`
            }
          </div>
          <button class="openChatBtn button button-sm">–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</button>
        `;
        card.querySelector('.openChatBtn').addEventListener('click', () => {
          showAdminChatDetail(email);
        });
        chatCardsContainer.appendChild(card);
      });
    
      if(isAdmin){
        companiesContainer.querySelectorAll('.delCompanyBtn').forEach(btn=>{
          btn.addEventListener('click', function(){
            const cid = this.getAttribute('data-id');
            const idx = companies.findIndex(x => x.id===cid);
            if(idx!==-1){
              if(confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏?')){
                companies.splice(idx,1);
                localStorage.setItem('templatesCompanies', JSON.stringify(companies));
                renderCompanyCards();
              }
            }
          });
        });
      }
    }
    renderCompanyCards();
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    function renderCompanyCards(searchTerm = '') {
      companiesContainer.innerHTML = '';
      let filtered = companies;
      if (searchTerm) {
        filtered = companies.filter(comp => comp.name.toLowerCase().includes(searchTerm));
      }
      if (!filtered.length) {
        companiesContainer.innerHTML = '<p>–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π —Å —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.</p>';
        return;
      }
      const grid = document.createElement('div');
      grid.className = 'templates-grid';
    
      filtered.forEach(comp => {
        const card = document.createElement('div');
        card.className = 'template-card';
        card.innerHTML = `
          <div class="template-card-title">${comp.name}</div>
          <div class="template-card-btns">
            <button class="viewTmplBtn button button-sm" data-id="${comp.id}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à–∞–±–ª–æ–Ω—ã</button>
            ${
              isAdmin
                ? `<button class="delCompanyBtn button button-sm button-outline" data-id="${comp.id}">–£–¥–∞–ª–∏—Ç—å</button>`
                : ''
            }
          </div>
        `;
        card.querySelector('.viewTmplBtn').addEventListener('click', function () {
          const cid = this.getAttribute('data-id');
          const found = companies.find(x => x.id === cid);
          if (!found) return;
          showCompanyTemplates(found.id, found.name);
        });
        if(isAdmin){
          card.querySelector('.delCompanyBtn')?.addEventListener('click', function(){
            const cid = this.getAttribute('data-id');
            const idx = companies.findIndex(x => x.id===cid);
            if(idx!==-1){
              if(confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏?')){
                companies.splice(idx,1);
                localStorage.setItem('templatesCompanies', JSON.stringify(companies));
                renderCompanyCards();
              }
            }
          });
        }
        grid.appendChild(card);
      });
      companiesContainer.appendChild(grid);
    }
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ 

    function showCompanyTemplates(companyId, companyName){
      // –†–∏—Å—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
      details.innerHTML = `
        <div class="tmpls-inner-header">
          <span class="tmpls-title">–®–∞–±–ª–æ–Ω—ã –¥–ª—è ${companyName}</span>
          ${
            isAdmin
              ? `<button id="tmplAddBtn" class="tmpls-add-btn">+ –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω</button>`
              : ''
          }
          <button id="tmplBackBtn" class="button button-outline" style="margin-left:auto;">–ù–∞–∑–∞–¥</button>
        </div>
        <div id="tmplList" class="tmpls-list"></div>
      `;
      const tmplList = details.querySelector('#tmplList');
      const tmplAddBtn = details.querySelector('#tmplAddBtn');
      const tmplBackBtn = details.querySelector('#tmplBackBtn');
    
      let allTemplates = JSON.parse(localStorage.getItem('templates')) || {};
      if(!allTemplates[companyId]) allTemplates[companyId] = [];
    
      function getFileIcon(fileName) {
        const ext = fileName.split('.').pop().toLowerCase();
        if (ext === 'pdf') return `<span class="tmpls-icon">üìÑ</span>`;
        if (['doc','docx'].includes(ext)) return `<span class="tmpls-icon">üìù</span>`;
        if (['xls','xlsx'].includes(ext)) return `<span class="tmpls-icon">üìä</span>`;
        if (['png','jpg','jpeg'].includes(ext)) return `<span class="tmpls-icon">üñºÔ∏è</span>`;
        return `<span class="tmpls-icon">üìÅ</span>`;
      }
    
      function renderTmplList(){
        const arr = allTemplates[companyId];
        tmplList.innerHTML = '';
        if(!arr.length){
          tmplList.innerHTML = '<div class="tmpls-empty">–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.</div>';
          return;
        }
        arr.forEach(tmpl => {
          const card = document.createElement('div');
          card.className = 'tmpls-card';
          card.innerHTML = `
            ${getFileIcon(tmpl.fileName)}
            <div class="tmpl-name">${tmpl.name}</div>
            <div class="tmpl-filename">${tmpl.fileName}</div>
            <div class="tmpl-actions">
              <button class="prevTmplBtn button button-sm" data-id="${tmpl.id}">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>
              <a href="${tmpl.data}" download="${tmpl.fileName}" class="button button-sm">–°–∫–∞—á–∞—Ç—å</a>
              ${isAdmin? `<button class="delTmplBtn button button-sm button-outline" data-id="${tmpl.id}">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
            </div>
          `;
          card.querySelector('.prevTmplBtn').onclick = () => {
            if(tmpl.fileName.toLowerCase().endsWith('.pdf')){
              showPreview(`<iframe src="${tmpl.data}" width="100%" height="600px"></iframe>`);
            } else if(/\.(png|jpe?g)$/i.test(tmpl.fileName)){
              showPreview(`<img src="${tmpl.data}" style="max-width:100%;height:auto;" />`);
            } else {
              showPreview(`<p>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å "${tmpl.fileName}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å.</p>`);
            }
          };
          card.querySelector('.delTmplBtn')?.addEventListener('click',()=>{
            if(confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?')){
              const arr = allTemplates[companyId];
              const i = arr.findIndex(x=>x.id===tmpl.id);
              if(i!==-1){
                arr.splice(i,1);
                allTemplates[companyId]=arr;
                localStorage.setItem('templates', JSON.stringify(allTemplates));
                showToast('–®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω!','info');
                renderTmplList();
              }
            }
          });
          tmplList.appendChild(card);
        });
      }
    
      // –ú–æ–¥–∞–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
      function showAddModal(){
        const bg = document.createElement('div');
        bg.className = 'tmpls-modal-bg';
        bg.innerHTML = `
          <div class="tmpls-modal">
            <form id="tmplModalForm" autocomplete="off">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</label>
              <input type="text" name="name" required maxlength="80" autocomplete="off">
              <label>–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞:</label>
              <input type="file" name="file" required>
              <div class="btns">
                <button type="submit" class="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button type="button" id="tmplCancelBtn" class="button button-outline">–û—Ç–º–µ–Ω–∞</button>
              </div>
            </form>
          </div>
        `;
        document.body.appendChild(bg);
        const modalForm = bg.querySelector('#tmplModalForm');
        const cancelBtn = bg.querySelector('#tmplCancelBtn');
        cancelBtn.onclick = () => document.body.removeChild(bg);
    
        modalForm.onsubmit = (e) => {
          e.preventDefault();
          const fd = new FormData(modalForm);
          const name = fd.get('name');
          const file = fd.get('file');
          if(!file){
            showToast('–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª','error');
            return;
          }
          const reader = new FileReader();
          reader.onload = function(ev){
            const dataURL = ev.target.result;
            const newTmpl = {
              id: Date.now(),
              name,
              fileName: file.name,
              data: dataURL
            };
            allTemplates[companyId].push(newTmpl);
            localStorage.setItem('templates', JSON.stringify(allTemplates));
            showToast('–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!','success');
            document.body.removeChild(bg);
            renderTmplList();
          };
          reader.readAsDataURL(file);
        };
      }
    
      if(isAdmin && tmplAddBtn){
        tmplAddBtn.onclick = showAddModal;
      }
      tmplBackBtn.onclick = () => renderTemplatesPage();
    
      renderTmplList();
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–∞
      

      if(addTmplBtn){
        addTmplBtn.addEventListener('click',()=>{
          if(!isAdmin){
            showToast('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å','error');
            return;
          }
          tmplForm.style.display='block';
        });
      }
      if(cancelTmpl){
        cancelTmpl.addEventListener('click',()=>{
          tmplForm.style.display='none';
          newTemplateForm.reset();
        });
      }
      if(newTemplateForm){
        newTemplateForm.addEventListener('submit',(e)=>{
          e.preventDefault();
          if(!isAdmin){
            showToast('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å','error');
            return;
          }
          const fd=new FormData(newTemplateForm);
          const name=fd.get('name');
          const file=fd.get('file');
          if(!file){
            showToast('–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª','error');
            return;
          }
          const reader=new FileReader();
          reader.onload=function(ev){
            const dataURL=ev.target.result;
            const newTmpl={
              id:Date.now(),
              name,
              fileName:file.name,
              data:dataURL
            };
            allTemplates[companyId].push(newTmpl);
            localStorage.setItem('templates', JSON.stringify(allTemplates));
            showToast('–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!','success');
            tmplForm.style.display='none';
            newTemplateForm.reset();
            renderTmplList();
          };
          reader.readAsDataURL(file);
        });
      }
    }
  }