// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è userChat.js)
function renderMessages(arr, container, currentUserRole = 'user') {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const wasAtBottom = (container.scrollTop + container.clientHeight >= container.scrollHeight - 10);
  container.innerHTML = '';
  arr.forEach(msg => {
    const who = msg.from === 'user' ? 'user' : 'admin';
    const name = who === 'user'
      ? (currentUserRole === 'admin' ? (msg.userEmail || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") : "–í—ã")
      : "–ú–µ–Ω–µ–¥–∂–µ—Ä";
    const text = msg.fileName
      ? `<a href="${msg.fileData}" class="file-link" download="${msg.fileName}">${msg.fileName}</a>`
      : msg.text;
    const div = document.createElement('div');
    div.className = `chat-bubble ${who}`;
    div.innerHTML = `
      <div class="text">${text}</div>
      <div class="meta">
        <span class="author">${name}</span> ${msg.date || ''}
      </div>
    `;
    container.appendChild(div);
  });
  // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤–Ω–∏–∑—É
  if (wasAtBottom) {
    container.scrollTop = container.scrollHeight;
  }
}

window.renderUserChatPage = function () {
    const details = document.querySelector('.details');
    const userRaw = localStorage.getItem('currentUser');
    const curUser = userRaw ? JSON.parse(userRaw) : {};
  
    if (!curUser || curUser.role !== 'user') {
      details.innerHTML = '<h1>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</h1>';
      return;
    }
  
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    const userEmail = curUser.email;
    let allChats = JSON.parse(localStorage.getItem('adminChats') || '{}');
    if (!allChats[userEmail]) allChats[userEmail] = [];
    let chatArr = allChats[userEmail];
  
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–¥–ª—è —é–∑–µ—Ä–∞ ‚Äî –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç admin, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç "readByUser": true)
    const unreadCount = chatArr.filter(msg => msg.from === 'admin' && !msg.readByUser).length;
  
    // –ì–ª–∞–≤–Ω—ã–π HTML ‚Äî —Å—Ç–∏–ª—å Telegram/WhatsApp, –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤!
    details.innerHTML = `
      <div class="chat-container">
        <div class="chat-messages"></div>
        <form class="chat-input-row">
          <button type="button" class="attach-btn" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">üìé</button>
          <input type="file" class="hidden-file" style="display:none;">
          <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...">
          <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </form>
        <div class="selected-file-name" style="font-size:0.96em;color:#555;margin-top:2px;min-height:20px;"></div>
        <div id="userChatUnreadNotice" style="text-align:center;color:#0057ff;display:${unreadCount > 0 ? 'block' : 'none'};">
          –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        </div>
      </div>
    `;
  
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const chatMessages = details.querySelector('.chat-messages');
    const chatForm = details.querySelector('.chat-input-row');
    const chatInput = chatForm.querySelector('input[type="text"]');
    const fileInput = chatForm.querySelector('input[type="file"]');
    const attachBtn = chatForm.querySelector('.attach-btn');
    const fileNameDiv = details.querySelector('.selected-file-name');
    const unreadNotice = details.querySelector('#userChatUnreadNotice');
  
    // –†–µ–Ω–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    function renderMessages(arr) {
      chatMessages.innerHTML = '';
      arr.forEach(msg => {
        const who = msg.from === 'user' ? 'user' : 'admin';
        const name = who === 'user' ? "–í—ã" : "–ú–µ–Ω–µ–¥–∂–µ—Ä";
        const text = msg.fileName
          ? `<a href="${msg.fileData}" class="file-link" download="${msg.fileName}">${msg.fileName}</a>`
          : msg.text;
        const div = document.createElement('div');
        div.className = `chat-bubble ${who}`;
        div.innerHTML = `
          <div class="text">${text}</div>
          <div class="meta"><span class="author">${name}</span> ${msg.date || ''}</div>
        `;
        chatMessages.appendChild(div);
      });
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
  
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', () => {
      if (fileInput.files[0]) {
        fileNameDiv.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${fileInput.files[0].name}`;
      } else {
        fileNameDiv.textContent = '';
      }
    });
    attachBtn.addEventListener('click', () => fileInput.click());
  
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const txt = chatInput.value.trim();
      const file = fileInput.files[0];
      if (!txt && !file) return;
      let msgObj = {
        userEmail,
        from: 'user',
        text: txt,
        fileName: '',
        fileData: '',
        date: new Date().toLocaleString(),
        timestamp: Date.now(),
        readByUser: true,
        readByAdmin: false
      };
      if (file) {
        const reader = new FileReader();
        reader.onload = (ev) => {
          msgObj.fileName = file.name;
          msgObj.fileData = ev.target.result;
          chatArr.push(msgObj);
          allChats[userEmail] = chatArr;
          localStorage.setItem('adminChats', JSON.stringify(allChats));
          fileInput.value = '';
          fileNameDiv.textContent = '';
          chatInput.value = '';
          renderMessages(chatArr);
        };
        reader.readAsDataURL(file);
      } else {
        chatArr.push(msgObj);
        allChats[userEmail] = chatArr;
        localStorage.setItem('adminChats', JSON.stringify(allChats));
        chatInput.value = '';
        renderMessages(chatArr);
      }
    });
  
    // –ü—Ä–æ—á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
    function markAdminMessagesRead() {
      let wasUnread = false;
      chatArr.forEach(msg => {
        if (msg.from === 'admin' && !msg.readByUser) {
          msg.readByUser = true;
          wasUnread = true;
        }
      });
      if (wasUnread) {
        allChats[userEmail] = chatArr;
        localStorage.setItem('adminChats', JSON.stringify(allChats));
        // –£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (unreadNotice) unreadNotice.style.display = 'none';
        const badge = document.getElementById('userChatUnread');
        if (badge) badge.style.display = 'none';
      }
    }
    markAdminMessagesRead();
  
    // –°—á—ë—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∫–æ–Ω–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ)
    function updateSidebarChatBadge() {
      const badge = document.getElementById('userChatUnread');
      const unread = chatArr.filter(m => m.from === 'admin' && !m.readByUser).length;
      if (badge) {
        badge.textContent = unread > 0 ? unread : '';
        badge.style.display = unread > 0 ? '' : 'none';
      }
    }
    updateSidebarChatBadge();
  
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    setInterval(() => {
      allChats = JSON.parse(localStorage.getItem('adminChats') || '{}');
      chatArr = allChats[userEmail] || [];
      renderMessages(chatArr);
      updateSidebarChatBadge();
      markAdminMessagesRead();
    }, 3000);
  
    renderMessages(chatArr);
  };
    
  
    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const chatBox = document.getElementById('userChatBox');
    const chatForm = document.getElementById('userChatForm');
    const chatInput = document.getElementById('userChatInput');
    const chatFile = document.getElementById('userChatFile');
    const attachBtn = document.getElementById('userAttachFileBtn');
    const fileNameDiv = document.getElementById('userSelectedFileName');
    const unreadNotice = document.getElementById('userChatUnreadNotice');
  
    // –†–µ–Ω–¥–µ—Ä —á–∞—Ç–∞
    function renderChat() {
      renderMessages(chatArr, chatBox, 'user');
    }
  
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    chatFile.addEventListener('change', () => {
      if (chatFile.files[0]) {
        fileNameDiv.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${chatFile.files[0].name}`;
      } else {
        fileNameDiv.textContent = '';
      }
    });
    attachBtn.addEventListener('click', () => chatFile.click());
  
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const txt = chatInput.value.trim();
      const file = chatFile.files[0];
      if (!txt && !file) return;
      let msgObj = {
        userEmail,
        from: 'user',
        text: txt,
        fileName: '',
        fileData: '',
        date: new Date().toLocaleString(),
        timestamp: Date.now(),
        readByUser: true,
        readByAdmin: false
      };
      if (file) {
        const reader = new FileReader();
        reader.onload = (ev) => {
          msgObj.fileName = file.name;
          msgObj.fileData = ev.target.result;
          chatArr.push(msgObj);
          allChats[userEmail] = chatArr;
          localStorage.setItem('adminChats', JSON.stringify(allChats));
          chatFile.value = '';
          fileNameDiv.textContent = '';
          chatInput.value = '';
          renderChat();
        };
        reader.readAsDataURL(file);
      } else {
        chatArr.push(msgObj);
        allChats[userEmail] = chatArr;
        localStorage.setItem('adminChats', JSON.stringify(allChats));
        chatInput.value = '';
        renderChat();
      }
    });
  
    // –ü—Ä–æ—á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
    function markAdminMessagesRead() {
      let wasUnread = false;
      chatArr.forEach(msg => {
        if (msg.from === 'admin' && !msg.readByUser) {
          msg.readByUser = true;
          wasUnread = true;
        }
      });
      if (wasUnread) {
        allChats[userEmail] = chatArr;
        localStorage.setItem('adminChats', JSON.stringify(allChats));
        // –£–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        if (unreadNotice) unreadNotice.style.display = 'none';
        const badge = document.getElementById('userChatUnread');
        if (badge) badge.style.display = 'none';
      }
    }
  
    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞ —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    markAdminMessagesRead();
  
    // –°—á—ë—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∫–æ–Ω–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ)
    function updateSidebarChatBadge() {
      const badge = document.getElementById('userChatUnread');
      const unread = chatArr.filter(m => m.from === 'admin' && !m.readByUser).length;
      if (badge) {
        badge.textContent = unread > 0 ? unread : '';
        badge.style.display = unread > 0 ? '' : 'none';
      }
    }
    updateSidebarChatBadge();
  
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    setInterval(() => {
      allChats = JSON.parse(localStorage.getItem('adminChats') || '{}');
      chatArr = allChats[userEmail] || [];
      renderChat();
      updateSidebarChatBadge();
      markAdminMessagesRead();
    }, 3000);
  
    renderChat();
export const renderUserChatPage = window.renderUserChatPage;
// –ö–æ–Ω–µ—Ü userChat.js